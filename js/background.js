// Generated by CoffeeScript 1.7.1
(function() {
  var addBookmark, cacheData, client, fetchBookmarks, getBookmark, getData, isCommunicateDropbox, mergeExistBookmarks, trimRepeat, updateFile;

  cacheData = void 0;

  chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
    var cmd, keyword, tag;
    cmd = request.cmd;
    switch (cmd) {
      case "getTags":
        return getData(function(data) {
          data.tags.sort(function(a, b) {
            return b.count - a.count;
          });
          return sendResponse(data.tags);
        });
      case "getLinksByTag":
        tag = request.tag.trim();
        return getData(function(data) {
          var bookmark, i, j, links, tags;
          links = [];
          i = 0;
          while (i < data.bookmarks.length) {
            bookmark = data.bookmarks[i];
            tags = bookmark.tags;
            j = 0;
            while (j < tags.length) {
              if (tags[j] === tag) {
                links.push(bookmark);
                break;
              }
              j++;
            }
            i++;
          }
          console.dir(links);
          return sendResponse(links);
        });
      case "search":
        keyword = request.keyword;
        return getData(function(data) {
          var bookmark, i, j, result;
          result = [];
          if (keyword && keyword.trim() !== "") {
            i = 0;
            while (i < cacheData.bookmarks.length) {
              if (result.length >= 10) {
                break;
              }
              bookmark = cacheData.bookmarks[i];
              if (bookmark.title.indexOf(keyword) !== -1) {
                result.push(bookmark);
              } else if (bookmark.url.indexOf(keyword) !== -1) {
                result.push(bookmark);
              } else {
                j = 0;
                while (j < bookmark.tags.length) {
                  tag = bookmark.tags[j];
                  if (tag.indexOf(keyword) !== -1) {
                    result.push(bookmark);
                    break;
                  }
                  j++;
                }
              }
              i++;
            }
          } else {
            result = data.bookmarks.slice(0, 10);
          }
          return sendResponse(result);
        });
    }
  });


  /*
  get bookmark data
  @param cb
   */

  getData = function(cb) {
    if (typeof cacheData === "undefined") {
      cacheData = JSON.parse(localStorage.data);
      return cb(cacheData);
    } else {
      cb(cacheData);
      return cacheData = JSON.parse(localStorage.data);
    }
  };


  /*
  get bookmark by url,if not exist,return null
  @param url
   */


  /*
  读取dropbox的文件数据
  @param cb
   */

  mergeExistBookmarks = function(existData) {
    var data;
    data = existData;
    if (typeof existData === "string") {
      data = JSON.parse(existData);
    }
    if (typeof existData === "undefined") {
      data = {
        tags: [],
        bookmarks: []
      };
    }
    chrome.notifications.create("notify", {
      type: "progress",
      title: "初始化数据",
      message: "正在转移书签数据",
      iconUrl: "/icons/heart_r_64.png",
      progress: 0
    }, function(notificationId) {

      /*
      		初始化书签
       */
      chrome.bookmarks.getTree(function(results) {
        var bookmark, e, i, list, progress;
        try {
          list = [];
          fetchBookmarks(results[0], "", list);
          i = 0;
          while (i < list.length) {
            bookmark = list[i];
            addBookmark(data, bookmark);
            progress = parseInt((i + 1) * 100 / list.length);
            chrome.notifications.update(notificationId, {
              progress: progress
            }, function() {
              if (progress === 100) {
                setTimeout((function() {
                  chrome.notifications.clear(notificationId, function() {});
                }), 3 * 1000);
              }
            });
            i++;
          }
          localStorage.data = JSON.stringify(data);
          updateFile(function(err) {
            if (err) {
              chrome.notifications.create("notify", {
                type: "basic",
                title: "Error",
                message: "Can not save data in dropbox,error:" + err.message,
                iconUrl: "/icons/error_64.png"
              }, function() {});
            } else {
              chrome.notifications.create("notify", {
                type: "basic",
                title: "Success",
                message: "Save data in dropbox successfully",
                iconUrl: "/icons/success_64.png"
              }, function() {});
            }
          });
        } catch (_error) {
          e = _error;
          console.dir(e);
        }
      });
    });
  };


  /*
  添加书签
  @param tags
  @param title
  @param url
   */

  addBookmark = function(data, obj, save, cb) {
    var addTime, bookmark, e, hasExist, hasPush, i, j, tag, tagArray, title, tmpTag, url;
    try {
      title = obj.title;
      url = obj.url;
      addTime = obj.addTime || new Date().getTime();
      tagArray = trimRepeat(obj.tags.split(","));
      hasExist = false;
      i = 0;
      while (i < data.bookmarks.length) {
        bookmark = data.bookmarks[i];
        if (bookmark.url === url) {
          hasExist = true;
          bookmark.id = obj.id;
          bookmark.title = title;
          bookmark.lastAccessTime = new Date().getTime();
          bookmark.tags = trimRepeat(bookmark.tags.concat(tagArray));
        }
        i++;
      }
      if (!hasExist) {
        data.bookmarks.push({
          title: title,
          url: url,
          tags: tagArray,
          addTime: addTime,
          lastAccessTime: new Date().getTime(),
          accessCount: 1
        });
        i = 0;
        while (i < tagArray.length) {
          tmpTag = tagArray[i];
          hasPush = false;
          j = 0;
          while (j < data.tags.length) {
            tag = data.tags[j];
            if (tag.name === tmpTag) {
              tag.count += 1;
              hasPush = true;
              break;
            }
            j++;
          }
          if (!hasPush) {
            data.tags.push({
              name: tmpTag,
              lastModifyTime: new Date().getTime(),
              count: 1
            });
          }
          i++;
        }
      }
      if (save) {
        localStorage.data = JSON.stringify(data);
        updateFile(cb);
      }
    } catch (_error) {
      e = _error;
      console.dir(e);
    }
  };


  /*
  update data file in dropbox
   */


  /*
  去掉数据组重复的项
  @param array
  @return {Array}
   */

  trimRepeat = function(array) {
    var i, result, tmp;
    result = [];
    i = 0;
    while (i < array.length) {
      tmp = array[i];
      if (result.indexOf(tmp) === -1) {
        result.push(tmp);
      }
      i++;
    }
    return result;
  };

  if (typeof localStorage.data === "undefined") {
    localStorage.data = JSON.stringify({
      tags: [],
      bookmarks: []
    });
  }

  client = new Dropbox.Client({
    key: "2l9256omgxuptj7"
  });

  client.authDriver(new Dropbox.AuthDriver.ChromeExtension({
    receiverPath: "dropbox/chrome_oauth_receiver.html"
  }));

  isCommunicateDropbox = false;

  chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
    chrome.pageAction.show(tabId);
    if (getBookmark(tab.url)) {
      return chrome.pageAction.setIcon({
        tabId: tabId,
        path: "icons/heart_b_24.png"
      });
    }
  });

  getBookmark = function(url) {
    var bookmark, bookmarks, data, i;
    if (typeof url === "undefined") {
      return null;
    }
    data = JSON.parse(localStorage.data);
    if (typeof data !== "undefined" && data.bookmarks instanceof Array) {
      bookmarks = data.bookmarks;
      i = 0;
      while (i < bookmarks.length) {
        bookmark = bookmarks[i];
        if (bookmark.url === url) {
          return bookmark;
        }
        i++;
      }
    }
    return null;
  };

  fetchBookmarks = function(node, folderName, list) {
    var i;
    if (typeof node.children !== "undefined") {
      i = 0;
      while (i < node.children.length) {
        fetchBookmarks(node.children[i], node.title, list);
        i++;
      }
    } else {
      list.push({
        id: node.id,
        tags: folderName || "unknown",
        title: node.title,
        url: node.url,
        addTime: node.dateAdded
      });
    }
  };

  chrome.runtime.onInstalled.addListener(function() {
    isCommunicateDropbox = true;
    client.authenticate(function(err, client) {
      if (err) {
        mergeExistBookmarks();
      } else {
        client.readFile("data.json", function(err, content, stat, rangeInfo) {
          isCommunicateDropbox = false;
          if (!err) {
            chrome.notifications.create("notify", {
              type: "basic",
              title: "Load data success",
              message: "Load data of dropbox successfully",
              iconUrl: "/icons/success_64.png"
            }, function(notifyId) {
              setTimeout((function() {
                chrome.notifications.clear(notifyId, function() {
                  mergeExistBookmarks(content);
                });
              }), 1000);
            });
          } else {
            mergeExistBookmarks(content);
          }
        });
      }
    });
  });

  updateFile = function(cb) {
    if (isCommunicateDropbox) {
      setTimeout((function() {
        updateFile(cb);
      }), 5 * 1000);
    } else {
      isCommunicateDropbox = true;
      client.authenticate(function(err, client) {
        if (err) {
          if (typeof cb === "function") {
            cb(err);
          }
        } else {
          client.writeFile("data.json", localStorage.data || {}, function(err, stat) {
            isCommunicateDropbox = false;
            if (typeof cb === "function") {
              cb(err, stat);
            }
          });
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=background.map
